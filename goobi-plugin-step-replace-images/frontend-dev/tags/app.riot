<app>
	<link rel="stylesheet" href="/goobi/plugins/{props.plugin_name}/css/style.css">
	<div class="box box-color lightgrey box-bordered">
         <div class="box-title">
             <h2>
                 <i class="fa fa-puzzle-piece"></i>
                 {msg('plugin_replaceImages')}
             </h2>
             <div class="actions">
                <a 
                    class="btn btn-mini btn-default" 
                    onclick={leaveAndCloseTask} 
                    title="{msg('task_leavePluginAndFinishTask')}" 
                    aria-label="{msg('task_leavePluginAndFinishTask')}" 
                    if={!props.goobi_opts.pluginSimulation}>
                        <i class="fa fa-check"></i>
                </a>
				<a 
                    class="btn btn-mini btn-default" 
                    onclick={leave} title="{msg('plugin_replaceimages_saveAndExit')}" 
                    aria-label="{msg('plugin_replaceimages_saveAndExit')}">
                        <i class="fa fa-close"></i>
                </a>
             </div>
         </div>

         <div class="box-content" style="background-color:#eee">
			<table class="table" style="margin-top: 30px;">
				<thead>
					<tr>
						<th each={imageNature in state.images[0].natures}>
                            {msg('images')} ({imageNature.folder})
                        </th>
						<th>{msg('plugin_replaceimages_filename')}</th>
						<th>ID</th>
						<th>{msg('plugin_replaceimages_remark')}</th>
						<th>{msg('plugin_replaceimages_orderLabel')}</th>
					</tr>
				</thead>
				<tbody>
					<tr each={image in state.images}>
                        
						<td each={imageNature in image.natures}
                            class="{imageNature.hover ? 'hover' : ''}" 
                            ondragover={e => allowDrop(e, imageNature)}
                            ondrop={e => onDrop(e, image, imageNature)}
                            ondragleave={e => dragLeave(e, imageNature)}
                        >
                            <div style="position: relative; display: inline-block">
                                <span if={imageNature.uploaded} style="position:absolute; bottom:0; left: 0; right: 0; height: {imageNature.uploaded}%; background: rgba(0,0,0,0.3)"></span>
                                <img aria-label="{image.name}" class="replace-image" src="{imageNature.url}">
                            </div>
                        </td>
						<td>{image.name}</td>
						<td>{image.id}</td>
						<td>{image.remark}</td>
						<td>{image.orderLabel}</td>
					</tr>
				</tbody>
			</table>
		</div>
	</div>
    <br>
    
    <!-- Save and finish the task -->
    <a class="btn btn-green font-size-s" 
        id="finishAndClose" 
        onclick={leaveAndCloseTask} 
        title="{msg('task_leavePluginAndFinishTask')}" 
        if={!props.goobi_opts.pluginSimulation}>
        <i class="fa fa-check margin-right-5"></i>
        {msg('task_leavePluginAndFinishTask')}
    </a>
     
    <!-- Save -->
    <a class="btn btn-lightgrey pull-right font-size-s" 
        id="absenden" 
        onclick={leave}
        title="{msg('pluginLeave')}">
        <i class="fa fa-close margin-right-5"></i>
        {msg('pluginLeave')}
    </a>
    <br>
    <br>
      
  <script>
  import Thumbcanvas from './thumbcanvas.riot'
  export default {
	components: {
		Thumbcanvas
	},
    onBeforeMount(props, state) {
      this.state = {
              msgs: {},
              images: [{}],
              uploadFiles: [],
              errorFiles: []
      };
      console.log(props.goobi_opts)
      fetch(`/goobi/plugins/replaceimages/process/${props.goobi_opts.processId}/${props.goobi_opts.stepId}/images`).then(resp => {
        resp.json().then(json => {
          this.state.images = json;
          for(let image of this.state.images) {
        	  for(let nature of image.natures) {
                  let url = `/goobi/api/image/${props.goobi_opts.processId}/${nature.folder}/${nature.name}/full/!200,200/0/default.jpg`;
                  nature.url = url;
        	  }
          }
          console.log(this.state)
          this.update();
        })
      });
      fetch(`/goobi/api/messages/${props.goobi_opts.language}`, {
          method: 'GET',
          credentials: 'same-origin'
      }).then(resp => {
        resp.json().then(json => {
          this.state.msgs = json;
          this.update();
        })
      });
    },
    onMounted(props, state) {
      console.log("mounted");
    },
    onBeforeUpdate(props, state) {
    },
    onUpdated(props, state) {
      
    },
    dragLeave(e, image) {
        image.hover = false;
        this.update();
    },
    allowDrop(e, image) {
    	console.log("what is happening here??")
	    e.preventDefault();
	    image.hover = true;
	    this.update();
	},
	onDrop(e, image, imageNature) {
	    e.preventDefault();
	    console.log(image, imageNature);
	    imageNature.hover = false;
	    let files = e.dataTransfer.files;
	    let foundIdx = -1;
	     for(let idx=0; idx<this.state.images.length; idx++) {
	        let otherIm = this.state.images[idx];
	        let otherNature = otherIm.natures.filter(nature => nature.folder == imageNature.folder)[0]
	        if(otherIm.id == image.id) {
	            foundIdx = idx;
	        }
	        if(foundIdx >= 0 && idx >= foundIdx && idx < foundIdx + files.length) {
	            //otherIm.url = URL.createObjectURL(files[idx-foundIdx]);
	            let fileToUpload = files[idx-foundIdx];
	            fileToUpload.origImage = otherIm;
	            fileToUpload.origImageIdx = idx;
	            fileToUpload.nature = otherNature;
	            fileToUpload.uploaded = 0;
	            let newFileNameSuffix = fileToUpload.name.substring(fileToUpload.name.lastIndexOf("."));
	            fileToUpload.newName = otherIm.name + newFileNameSuffix;
	            this.state.uploadFiles.push(fileToUpload);
	            console.log(otherIm, files[idx-foundIdx])
	        }
	    }
	    this.uploadNext();
        this.update();
	},
	checkAllDone() {
	    var allDone = true
	    for(var uploadFile of this.state.uploadFiles) {
	        if(!uploadFile.done) {
	            allDone = false;
	            break;
	        }
	    }
	    if(allDone) {
	        let newImages = [];
	        for(var uploadFile of this.state.uploadFiles) {
	            newImages.push({
	                name: uploadFile.newName,
	                id: uploadFile.origImage.id
	            })
	        }
	        fetch(`/goobi/plugins/replaceimages/process/${this.props.goobi_opts.processId}/images`, {
		        method: "PUT",
		        body: JSON.stringify(newImages)
		    })
	        this.state.uploadFiles = [];
	        this.update();
	    }
	},
	leave() {
		document.getElementById("restPluginFinishLink").click();
	},
	leaveAndCloseTask() {
		document.getElementById("restPluginCloseStepLink").click();
	},
	uploadNext() {
	    var fileToUpload = null;
	    var idx = 0;
	    for(idx = 0; idx < this.state.uploadFiles.length; idx++) {
	        if( !this.state.uploadFiles[idx].uploading ) {
	            break;
	        }
	    }
	    if(idx == this.state.uploadFiles.length) {
	        this.checkAllDone();
	        return;
	    }
	    var fileToUpload = this.state.uploadFiles[idx];
	    var formData = new FormData();
	    formData.append("file", fileToUpload);
	    formData.append("filename", fileToUpload.newName)
	    var xhr = new XMLHttpRequest();
	    xhr.open("POST", `/goobi/api/processes/${this.props.goobi_opts.processId}/images/${fileToUpload.nature.folder}`);
	    xhr.uploadIdx = idx;
	    xhr.upload.uploadIdx = idx;
	    xhr.onerror = this.errorOnCurrent.bind(this);
	    xhr.onreadystatechange = function() {
	        console.log(xhr.readystate);
	    }
	    xhr.upload.ontimeout = this.errorOnCurrent.bind(this);
	    xhr.upload.onprogress = this.progress.bind(this);
	    xhr.onload = this.finishCurrentUpload.bind(this);
	    fileToUpload.xhr = xhr;
	    fileToUpload.uploading = true;
	    xhr.send(formData);
	},
	progress(e) {
	    let uploadFile = this.state.uploadFiles[e.target.uploadIdx];
	    let percentLoaded = (e.loaded/e.total) * 100;
	    if(percentLoaded == 100) {
	    	percentLoaded = null;
	    } 
    	//this.state.images[uploadFile.origImageIdx].uploaded = percentLoaded;
    	uploadFile.nature.uploaded = percentLoaded;
	    this.update();
	},
	finishCurrentUpload(e) {
		this.update();
	    console.log(e);
	    let uploadFile = this.state.uploadFiles[e.target.uploadIdx];
    	uploadFile.done = true;
	    if(e.target.status >= 400) {
	        console.log("error detected!")
	        var errorFile = this.state.uploadFiles[e.target.uploadIdx];
	    	this.state.errorFiles.push({name: errorFile.name, error: "upload"});
	    	return;
	    }
	    //TODO: remove old filename and update METS
	    if(uploadFile.nature.name != uploadFile.newName) {
		    fetch(`/goobi/plugins/replaceimages/process/${this.props.goobi_opts.processId}/images/${uploadFile.nature.folder}/${uploadFile.nature.name}`, {
		        method: "DELETE"
		    }).then(() => {
		        uploadFile.nature.name = uploadFile.newName;
		        let time = new Date().getTime();
	    		uploadFile.nature.url = `/goobi/api/image/${this.props.goobi_opts.processId}/${uploadFile.nature.folder}/${uploadFile.newName}/full/!200,200/0/default.jpg?d=${time}`;
	    		this.update();
		    })
	    } else {
	        let time = new Date().getTime();
	        uploadFile.nature.url = `/goobi/api/image/${this.props.goobi_opts.processId}/${uploadFile.nature.folder}/${uploadFile.newName}/full/!200,200/0/default.jpg?d=${time}`;
	    }
	    this.uploadNext();
	    this.update();
	},
	errorOnCurrent(e) {
	    console.log("error", e);
	    // set error on current and abort uploading
	    var errorFile = this.state.uploadFiles[e.target.uploadIdx];
	    errorFile.done = true;
	    this.state.errorFiles.push({name: errorFile.name, error: "upload"});
	    this.uploadNext();
	    this.update();
	},
    msg(str) {
      if(Object.keys(this.state.msgs).length == 0) {
          return "*".repeat(str.length);
      }
      if(this.state.msgs[str]) {
        return this.state.msgs[str].replace(" zzz", "");
      }
      return "???" + str + "???";
    }
  }
  </script>
</app>
